# Generated by Django 4.2.16 on 2025-10-16 08:41

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("chat", "0003_learningmodule_learningvideo"),
    ]

    operations = [
        migrations.CreateModel(
            name="PracticeLab",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("slug", models.SlugField(max_length=200)),
                (
                    "description",
                    models.TextField(help_text="Brief description of the lab"),
                ),
                (
                    "objectives",
                    models.TextField(help_text="Learning objectives (one per line)"),
                ),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                            ("expert", "Expert"),
                        ],
                        default="beginner",
                        max_length=20,
                    ),
                ),
                (
                    "lab_type",
                    models.CharField(
                        choices=[
                            ("interactive", "Interactive Exercise"),
                            ("ctf", "Capture The Flag"),
                            ("scenario", "Real-world Scenario"),
                            ("quiz", "Knowledge Quiz"),
                            ("coding", "Coding Challenge"),
                            ("network", "Network Lab"),
                            ("webapp", "Web Application Lab"),
                        ],
                        default="interactive",
                        max_length=20,
                    ),
                ),
                (
                    "instructions",
                    models.TextField(help_text="Step-by-step lab instructions"),
                ),
                (
                    "hints",
                    models.TextField(
                        blank=True, help_text="Hints for students (optional)"
                    ),
                ),
                (
                    "solution",
                    models.TextField(
                        blank=True, help_text="Lab solution/walkthrough (optional)"
                    ),
                ),
                (
                    "external_url",
                    models.URLField(
                        blank=True,
                        help_text="External lab URL (e.g., TryHackMe, HackTheBox)",
                    ),
                ),
                (
                    "tools_required",
                    models.TextField(
                        blank=True, help_text="Required tools (one per line)"
                    ),
                ),
                (
                    "estimated_time_minutes",
                    models.PositiveIntegerField(
                        default=30, help_text="Estimated completion time"
                    ),
                ),
                (
                    "points",
                    models.PositiveIntegerField(
                        default=10, help_text="Points awarded for completion"
                    ),
                ),
                ("order", models.PositiveIntegerField(default=0)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_premium",
                    models.BooleanField(
                        default=False, help_text="Requires premium access"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "module",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="practice_labs",
                        to="chat.learningmodule",
                    ),
                ),
            ],
            options={
                "ordering": ["module", "order", "title"],
            },
        ),
        migrations.CreateModel(
            name="LabCompletion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("is_completed", models.BooleanField(default=False)),
                (
                    "submission_notes",
                    models.TextField(blank=True, help_text="User's notes or solution"),
                ),
                (
                    "flag_submitted",
                    models.CharField(
                        blank=True, help_text="CTF flag if applicable", max_length=200
                    ),
                ),
                (
                    "score",
                    models.PositiveIntegerField(
                        default=0, help_text="Score earned (0-100)"
                    ),
                ),
                ("attempts", models.PositiveIntegerField(default=0)),
                ("hints_used", models.PositiveIntegerField(default=0)),
                (
                    "lab",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="completions",
                        to="chat.practicelab",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lab_completions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-started_at"],
            },
        ),
        migrations.AddIndex(
            model_name="practicelab",
            index=models.Index(
                fields=["module", "is_active"], name="chat_practi_module__823eaa_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="practicelab",
            index=models.Index(
                fields=["difficulty"], name="chat_practi_difficu_cb3a10_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="practicelab",
            index=models.Index(
                fields=["lab_type"], name="chat_practi_lab_typ_7bcbb2_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="practicelab",
            unique_together={("module", "slug")},
        ),
        migrations.AddIndex(
            model_name="labcompletion",
            index=models.Index(
                fields=["user", "is_completed"], name="chat_labcom_user_id_08ae1b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="labcompletion",
            index=models.Index(
                fields=["lab", "is_completed"], name="chat_labcom_lab_id_8e7d45_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="labcompletion",
            unique_together={("user", "lab")},
        ),
    ]
